#!/usr/bin/env node

//remove dir and files
var program = require('./program');
var fs = require('fs');
var fse = require('fs-extra');
var exec = require('child_process').exec;
var execSync = require('child_process').execSync;


var webpack = require('webpack');


const distDir = program.cwd+"/dist"
const happypackCache = program.cwd+"/.happypack"
var deleteFolderRecursive = function(path) {
  if( fs.existsSync(path) ) {
    fs.readdirSync(path).forEach(function(file,index){
      var curPath = path + "/" + file;
      if(fs.lstatSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath);
      } else { // delete file
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(path);
  }
};

/**
 * @deprecated 可废弃?
 */
var compressDist = function(){
  console.log("zipping... with prod enviroment");
  var archiver = require('archiver');
  var archive = archiver('zip',{
     store: false // Sets the compression method to STORE.
  });

  function createArchive(){
    var output = fs.createWriteStream(program.cwd + '/dist.zip');
    archive.on('error', function(err) {
      throw err;
    });
    archive.pipe(output);
    archive.directory(program.cwd + '/dist/',"dist");
    archive.finalize();
  }

  if(!fs.existsSync(program.cwd + '/dist.zip')){
    createArchive()
  }else{
    console.log("zip exists...")
    fs.unlinkSync(program.cwd + '/dist.zip');
    console.log("rezip...");
    createArchive();
  }
}

deleteFolderRecursive(distDir)
//if we don't delete it, the development cache will be used automatic
//and make the bundle unusable
deleteFolderRecursive(happypackCache)

//build production files
console.log("building with production enviroment")
var logger = require("../lib/utils/logger");
fs.exists(program.cwd+"/config/webpack", (exists) => {
  var config;
  if (exists) {
    console.log('using custom webpack production config');
    config = program.cwd+"/config/webpack/webpack.prod.config";
    console.error('using custom webpack config for production build');
  } else {
    config = __dirname+"/../lib/webpack/webpack.prod.config";
  }

  var actualConfig = require(config);
  console.log(actualConfig)

  var compiler;
  try {
    compiler = webpack(actualConfig);
    logger.log("读取webpack配置")
  } catch (err) {
    if (err.name === 'WebpackOptionsValidationError') {
      logger.fatal(err.message)
    } else {
      throw err
    }
  }

  compiler.run((err, stats) => {
    logger.log("编译")
    
    if (err) {
      logger.fatal(err)
      process.exitCode = 1
      return console.error(err.stack)
    }
    if (stats.hasErrors()) {
      process.exitCode = 1
      return console.error(stats.toString('errors-only'))
    }
    console.log(stats.toString({
      chunks: false,
      children: false,
      modules: false,
      colors: true
    }))
    console.log(`\n Compiled successfully.\n`)
    console.log(`The dist folder is ready to be deployed.`)
    console.log(`You may also serve it locally with a static server:\n`)
  })

});