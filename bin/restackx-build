#!/usr/bin/env node

//remove dir and files
var program = require('./program');
var fs = require('fs');
var fse = require('fs-extra');
var exec = require('child_process').exec;
var execSync = require('child_process').execSync;

const distDir = program.cwd+"/dist"
const happypackCache = program.cwd+"/.happypack"
var deleteFolderRecursive = function(path) {
  if( fs.existsSync(path) ) {
    fs.readdirSync(path).forEach(function(file,index){
      var curPath = path + "/" + file;
      if(fs.lstatSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath);
      } else { // delete file
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(path);
  }
};

/**
 * @deprecated 可废弃?
 */
var compressDist = function(){
  console.log("zipping... with prod enviroment");
  var archiver = require('archiver');
  var archive = archiver('zip',{
     store: false // Sets the compression method to STORE.
  });

  function createArchive(){
    var output = fs.createWriteStream(program.cwd + '/dist.zip');
    archive.on('error', function(err) {
      throw err;
    });
    archive.pipe(output);
    archive.directory(program.cwd + '/dist/',"dist");
    archive.finalize();
  }

  if(!fs.existsSync(program.cwd + '/dist.zip')){
    createArchive()
  }else{
    console.log("zip exists...")
    fs.unlinkSync(program.cwd + '/dist.zip');
    console.log("rezip...");
    createArchive();
  }
}

deleteFolderRecursive(distDir)
//if we don't delete it, the development cache will be used automatic
//and make the bundle unusable
deleteFolderRecursive(happypackCache)

//build production files
console.log("building with production enviroment")
var path2Config = program.cwd+ "/config/"+program.env
var projectConfig = require(path2Config);
fs.exists(program.cwd+"/config/webpack", (exists) => {
  var config;
  if (exists) {
    console.log('using custom webpack production config');
    config = program.cwd+"/config/webpack/webpack.prod.config";
    console.error('using custom webpack config for production build');
  } else {
    config = __dirname+"/../lib/webpack/webpack.prod.config.js";
  }

  //同步进行,暂时放到callback里
  // var config = __dirname+"/../lib/webpack/webpack.prod.config.js"
  var webpack = __dirname+"/../node_modules/webpack/bin/webpack.js"
  var cmd = ' '+webpack+' -p --progress --profile --config '+config;
//'node '+

  console.log('compiling production files...')
  exec("which node", function(error, stdout, stderr) {
    // command output is in stdout
    var nodePath = stdout.substr(0,stdout.length-1)
    execSync(nodePath+cmd, {
      'env': {'NODE_ENV': 'production','BABEL_ENV': 'server'},
      stdio: [0, 1, 2]
    })
  
    fs.exists(program.cwd+"/static", (exists) => {
      if(exists){
        //复制static到dist目录下
        console.log('bundling static libs...');
        fse.copy(program.cwd+'/static', program.cwd+'/dist', function (err) {
          if (err) return console.error(err)
          // compressDist();
        })
      }else{
        //直接压缩
        // compressDist();
      }
    })
  });

});
